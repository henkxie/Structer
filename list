#include<iostream>
#include<assert.h>
using namespace std;
typedef int Datatype;
struct ListNode
{
	ListNode(const Datatype x)
	:_data(x)
	, _next(NULL)
	{}
	Datatype _data;
	ListNode*_next;
};
class List
{
public:
	List()
		:_head(NULL)
		, _tail(NULL)
	{}
	List(const List &s)
		:_head(NULL)
		, _tail(NULL)
	{
		ListNode*cur = s._head;
		while (cur)
		{
			if (_head == NULL)
			{
				_head = new ListNode(cur->_data);
				_tail = _head;
			}
			else
			{
				_tail = new ListNode(cur->_data);
				_tail = _tail->_next;
			}
			cur = cur->_next;
		}

	}
	List &operator=(List &s)
	{
		Swap(s);
		return*this;
	}
	~List()
	{
		distroy();
	}
	void Pushback(const Datatype x)
	{
		if (_head == NULL)
		{
			_head = new ListNode(x);
			_tail = _head;
		}
		else
		{
			_tail->_next = new ListNode(x);
			_tail = _tail->_next;
		}
	}
	void Popback()
	{
		if (_head == NULL)
		{
			cout << "empty List" << endl;
		}
		else if (_head == _tail)
		{
			delete _tail;
			_head = _tail = NULL;
		}
		else
		{
			ListNode*prevtail = _head;
			while (prevtail->_next != _tail)
			{
				prevtail = prevtail->_next;
			}
			prevtail->_next = NULL;
			delete _tail;
			_tail = prevtail;
		}
	}
	void Pushfront(const Datatype x)
	{
		if (_head == NULL)
		{
			_head = new ListNode(x);
			_tail = _head;
		}
		else
		{
			ListNode*tmp = new ListNode(x);
			tmp->_next = _head;
			_head = tmp;
		}

	}
	void Popfront(const Datatype x)
	{
		if (_head == NULL)
		{
			cout << "empty list" << endl;
		}
		else
		{
			ListNode*cur = _head;
			cur = cur->_next;
			_head = cur;
		}
	}
	ListNode* Find(const Datatype& x)
	{
		ListNode*cur = _head;
		while (cur)
		{
			if (cur->_data == x)
			{
				return cur;
				break;
			}
				cur = cur->_next;
		}
		return NULL;
	}
	void Insert(ListNode* pos, const Datatype& x)
	{
		assert(pos);
		ListNode*cur = pos->_next;
		ListNode*tmp = new ListNode(x);
		pos->_next = tmp;
		tmp->_next = cur;
	}
	void Earse(ListNode*pos)
	{
		if (pos == _head)
		{
			_head = _head->_next;
			delete pos;
		}
		else
		{
			ListNode*cur = _head;
			while (cur)
			{
				if (cur->_next == pos)
				{
					cur->_next = pos->_next;
					delete pos;
					break;
				}
				cur = cur->_next;
			}
		}

	}

	void Swap(List&s)
	{
		swap(_head, s._head);
		swap(_tail, s._tail);
	}
	void distroy()
	{
		ListNode*cur = _head;
		while (cur)
		{
			ListNode*begin = cur;
			cur = cur->_next;
			delete begin;
		}
		_head = _tail = NULL;
	}
	void display()
	{
		ListNode*cur = _head;
		while (cur)
		{
			cout << cur->_data << "->";
			cur = cur->_next;
		}
		cout << "NULL" << endl;
	}
private:
	ListNode*_head;
	ListNode*_tail;
};
void Test()
{
	List s;
	s.Pushback(0);
	s.Pushback(2);
	s.Pushback(3);
	s.Pushback(4);
	/*s.Popback(4);
	s.Pushfront(0);
	s.Popfront(0);*/
	//s.Find(2);
	ListNode*ret=s.Find(2);
	s.Insert(ret, 1);
	//s.Earse(ret);
	s.display();
}
int main()
{
	Test();
	system("pause");
	return 0;
}
